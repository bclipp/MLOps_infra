variables:
  # TF_ROOT: ${CI_PROJECT_DIR}/environments/example/production
  TF_ROOT: terraform
  #TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/example-production
  TF_CACHE_KEY: default
  TF_STATE_NAME: default

image:
  name: registry.gitlab.com/gitlab-org/terraform-images/stable:latest


cache:
  key: "${TF_ROOT}"
  paths:
    - ${TF_ROOT}/.terraform/
    - ${TF_ROOT}/.terraform.lock.hcl

.init: &init
  stage: init
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform init

.validate: &validate
  stage: validate
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform validate

.build: &build
  stage: build
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  artifacts:
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

.deploy: &deploy
  stage: deploy
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform apply
  when: manual
  only:
    variables:
      - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

.destroy: &destroy
  stage: cleanup
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform destroy
  when: manual
